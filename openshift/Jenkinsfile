pipeline {
    agent {
        lable 'gradle'
    }

    environment {
        APP_NAME = "${env.APP_NAME}"
        APP_PORT = "${env.APP_PORT}"
        GIT_SOURCE_URL = "${env.GIT_SOURCE_URL}"
        GIT_SOURCE_REF = "${env.GIT_SOURCE_REF}"
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        APP_JAR_FILE = ""
    }

    stages {
        stage("Checkout") {
            steps {
                git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
            }
        }

        stage("Test & Build App") {
            steps {
                sh "gradle :${APP_NAME}:clean :${APP_NAME}:build -s"

            }
        }

        stage("Build Image with App") {
            steps {
                APP_JAR_FILE = sh(
                        script: "ls ${APP_NAME}/build/libs/*.jar",
                        returnStdout: true
                ).trim()
                if (!fileExists("${APP_JAR_FILE}")) {
                    error "Jar file not found"
                }
                sh "mkdir -p binaries"
                sh "cp ${APP_JAR_FILE} binaries/app.jar"
                sh "cp openshift/Dockerfile binaries/Dockerfile"

                openshift.withCluster() {
                    openshift.withProject("${PROJECT_NAME}") {
                        def build = openshift.startBuild("${APP_NAME}-docker", "--from-dir=binaries")
                        build.untilEach {
                            return it.object().status.phase == "Running"
                        }

                        build.logs("-f")

                        def noError = true
                        build.withEach {
                            if (it.object().status.phase == "Failed") {
                                noError = false
                            }
                        }

                        return noError
                    }
                }
            }
        }

        stage("Deploy") {
            steps {
                openshift.withCluster() {
                    openshift.withProject("${PROJECT_NAME}") {
                        def dc = openshift.selector("dc", "${APP_NAME}")
                        dc.rollout().latest()
                        dc.rollout().status()
                    }
                }
            }
        }
    }
}