def project = "workshop"
def appName = "${env.APP_NAME}"
def appPort = "${env.APP_PORT}"
def gitSourceUrl = "${env.GIT_SOURCE_URL}"
def gitSourceRef = "${env.GIT_SOURCE_REF}"
def buildNumber = "${env.BUILD_NUMBER}"
def appJarFile = ""

node("gradle") {

    stage("Checkout") {
        git url: "${gitSourceUrl}", branch: "${gitSourceRef}"
    }

    stage("Test") {
        sh "gradle :${appName}:test -s"
    }

    stage("Build App") {
        sh "gradle ${appName}:build -x :${appName}:test -s"
        appJarFile = sh (
            script: "ls ${appName}/build/libs/*.jar",
            returnStdout: true
        ).trim()

        def exists = fileExists "${appJarFile}"
        if (!exists) {
            error "Jar file not found"
        }
    }

    stage("Build Image") {
        sh "mkdir -p "binaries"
        sh "cp ${appJarFile} binaries/"
        sh "cp openshift/Dockerfile binaries/"

        openshift.withCluster() {
            openshift.withProject("${project}") {
                def build = openshift.startBuild("${appName}-docker", "--from-dir=binaries")
                build.untilEach {
                    return it.object().status.phase == "Running"
                }

                build.logs("-f")
            }
        }
    }

    stage("Tag Image") {
        openshift.withCluster() {
            openshift.withProject("${project}") {
                openshift.tag("${appName}:latest", "${appName}:${buildNumber}")
            }
        }
    }

    stage("Deploy") {
        openshift.withCluster() {
            openshift.withProject("${project}") {
                def dc = openshift.selector("dc", "${appName}")
                def cfg = dc.object()
                cfg.spec.template.spec.containers[0].image = "${appName}:${buildNumber}"

                openshift.apploy(cfg)

                dc.rollout().status()
            }
        }
    }
}