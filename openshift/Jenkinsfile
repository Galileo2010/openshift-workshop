def project="workshop"
def appName="${env.APP_NAME}"
def appPort="${env.APP_PORT}"
def gitSourceUrl="${env.GIT_SOURCE_URL}"
def gitSourceRef="${env.GIT_SOURCE_REF}"
def buildNumber="${env.BUILD_NUMBER}"
def appJarFile=""

node("gradle") {

    stage("Checkout") {
        git url: "${gitSourceUrl}", branch: "${gitSourceRef}"
    }

    stage("Test") {
        sh "gradle :${appName}:test -s"
    }

    stage("Build App") {
        sh "gradle ${appName}:build -s"
        appJarFile = sh (
            script: "ls ${appName}/build/libs/*.jar",
            returnStdout: true
        ).trim()

        def exists = fileExists "${appJarFile}"
        if (!exists) {
            error "Jar file not found"
        }
    }

    stage("Build Image") {
        sh "oc start-build ${appName}-docker --from-file=${appJarFile} -n ${project}"
        openshift.withCluster() {
            openshift.withProject(${project}) {
                def bc = openshift.selector('bc', "${appName}-docker")
                def blds = bc.related('builds')
                blds.untilEach {
                    return it.object().status.phase == "Complete"
                }
            }
        }
    }

    stage("Tag Image") {
        openshift.withCluster() {
            openshift.withProject(${project}) {
                openshift.tag("${appName}:latest", "${appName}:${buildNumber}")
            }
        }
    }
}